1.final关键字
  在java中final被称为终结器，final可以修饰类，属性和方法。
  被final修饰过的类不能继承。
  被final修饰的属性成为常量，不能被修改。
  被final修饰的方法不能被重写。
  命名规范：被final修饰的属性名都是大写。
  常量必须为其进行初始化赋值。

2.多态
  对象的多态分两种：向上转型和向下转型。
  向上转型：是指父类引用指向子类实例。通常向上转型的作用是参数统一。通过子类实例化后的父类对象所能调用的方法只能是父类中定义过的方法。
  向下转型：是指是指子类引用指向父类实例（必须强制转换父类实例）。向下转型通常的作用是调用子类特有的方法。向下转型之前一定会发生向上转型。
  关键字：instanceof,作用是判断某个对象是否是某个类的实例

3.抽象类
  抽象类是指类中有抽象方法的类。抽象方法的意思是没有方法体的方法。抽象方法存在的意义在于抽象类的子类必须重写抽象类中的抽象方法。是作为一种规范存在。
  3.1抽象类的限制：
    抽象类中也会存在一些属性，所以抽象类中也会存在构造方法，是为了给属性初始化。子类对象实例化的过程中也会遵守先执行父类构造，再执行子类构造。
    抽象类不能使用final定义，因为使用final定义的类不能有子类。
    抽象类中可以没有抽象方法，但依旧不能直接用new关键字实例化对象。
    抽象类中依然可以定义内部抽象类。子类可以根据需要来选择是否定义内部类来继承内部抽象类。
    外部抽象类不能使用static声明，但内部抽象类可以使用static声明。当内部抽象类使用static声明后相当于一个外部抽象类，继承的时候使用“外部类.内部类”的形式表示类名。
    抽象类中的属性和方法也可以使用static声明，被static声明的属性和方法可以直接使用类名调用。

4.模板设计模式 
    练。

5.接口
  如果一个类中只存在全局常量和抽象方法，那么这个时候讲不会定义个抽象类，而使用接口来代替。严格来说接口是一个特殊的类，其中只存在全局常量和抽象方法。
  接口的实现一定要有子类。
  接口可以多继承。
  接口可以使用向上转型的操作使用子类实例化。
  接口中的属性和方法只有一种权限：public。
  一个接口可以继承另一个接口，但接口不能继承一个类。
  接口可以继承多个接口。
  接口中可以定义普通内部类，抽象内部类，内部接口。
  

  